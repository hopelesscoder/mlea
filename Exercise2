LINEAR MODEL


import numpy as np

import matplotlib.pyplot as plt

from sklearn.linear_model import LinearRegression

x_train = np.load("regression_Xtrain.npy")

y_train = np.load("regression_ytrain.npy")

y_test = np.load("regression_ytest.npy")

X_test = np.load("regression_Xtest.npy")



lr = LinearRegression()

lr.fit(x_train.reshape(-1,1),y_train)

plt.plot(X_test, lr.predict(X_test.reshape(-1,1)), label ='model')

plt.scatter(X_test.reshape(-1,1),y_test, c='r', label='test')

plt.scatter(x_train.reshape(-1,1),y_train, label='train')

plt.xlabel('x')

plt.ylabel('y')

plt.legend()

from sklearn.metrics import mean_squared_error
mse = mean_squared_error(lr.predict(X_test.reshape(-1,1)), y_test)
plt.title("Degree 1\nMSE = {:.2e}".format(mse.mean()))

plt.show()





POLYNOMIAL MODEL


from sklearn.preprocessing import PolynomialFeatures

import numpy as np

import matplotlib.pyplot as plt

from sklearn.linear_model import LinearRegression

meanSquaredError = [0] *10
meanSquaredErrorE = [0] *10

for i in range(0,10):

	x_train = np.load("regression_Xtrain.npy")

	y_train = np.load("regression_ytrain.npy")

	y_test = np.load("regression_ytest.npy")

	X_test = np.load("regression_Xtest.npy")




	poly = PolynomialFeatures(degree=i+1, include_bias=False)

	xPoly = poly.fit_transform(x_train.reshape(-1,1))

	lr1 = LinearRegression()

	lr1.fit(xPoly,y_train)

	#x_range = np.linspace(-1,5.5,50)

	#predicted = lr1.predict(poly.fit_transform(x_range.reshape(-1,1)))
	predicted = lr1.predict(poly.fit_transform(X_test.reshape(-1,1)))

	#plt.plot(x_range.reshape(-1,1), predicted, label='model')
	plt.plot(X_test.reshape(-1,1), predicted, label='model')

	plt.scatter(X_test.reshape(-1,1),y_test, c='r', label='test')

	plt.scatter(x_train.reshape(-1,1),y_train, label='train')

	plt.xlabel('x')

	plt.ylabel('y')

	plt.legend()

	from sklearn.metrics import mean_squared_error
	mse = mean_squared_error(predicted.reshape(-1,1), y_test)
	plt.title("Degree {}\nMSE = {:.2e}".format(i+1,mse.mean()))
	meanSquaredError[i] = mse
	meanSquaredErrorE[i] = "{:.2e}".format(mse.mean())

	plt.show()







from sklearn.metrics import mean_squared_error
mse = mean_squared_error(predicted.reshape(-1,1), y_test)
plt.title("Degree 3\nMSE = {:.2e}".format(mse.mean()))
plt.show()


